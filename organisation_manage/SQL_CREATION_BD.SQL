DROP DATABASE IF EXISTS MLR1;

CREATE DATABASE MLR1;

set search_path = mlr1_schema;

CREATE TABLE IF NOT EXISTS FONCTION
 (
   FONCTION_NAME CHAR(32) NOT NULL  ,
   DESCRIPTION CHAR(255) NOT NULL,
   PRIMARY KEY (FONCTION_NAME) 
 ) ;


CREATE TABLE IF NOT EXISTS TEACHER
 (
   REGISTER_NUMBER BIGINT NOT NULL  ,
   OFFICE_ID BIGINT NOT NULL  ,
   FONCTION_NAME CHAR(32) NOT NULL  ,
   TEACHER_NAME CHAR(32) NOT NULL  ,
   TEACHER_ADDRESS CHAR(32) NOT NULL  ,
   TEACHER_AGE BIGINT NOT NULL  ,
   TEACHER_SEX CHAR(15) NOT NULL  ,
   TEACHER_CONTACT BIGINT NOT NULL,
   PRIMARY KEY (REGISTER_NUMBER) 
 ) ;



CREATE  INDEX I_FK_TEACHER_OFFICE
     ON TEACHER (OFFICE_ID ASC);

CREATE  INDEX I_FK_TEACHER_FONCTION
     ON TEACHER (FONCTION_NAME ASC);


CREATE TABLE IF NOT EXISTS SERIES
 (
   CODE BIGINT NOT NULL  ,
   SERIES_NAME CHAR(32) NOT NULL,
   PRIMARY KEY (CODE) 
 );


CREATE TABLE IF NOT EXISTS SECTION
 (
   SECTION_ID BIGINT NOT NULL  ,
   SECTION_NAME CHAR(32) NOT NULL,
   PRIMARY KEY (SECTION_ID,SECTION_NAME) 
 ) ;


CREATE TABLE IF NOT EXISTS MATERIAL
 (
   CODE CHAR(32) NOT NULL  ,
   REGISTER_NUMBER BIGINT NOT NULL  ,
   GRADE_ID BIGINT NOT NULL  ,
   MATERIAL_NAME CHAR(32) NOT NULL  ,
   MATERIAL_COEF BIGINT NOT NULL,
   PRIMARY KEY (CODE) 
 ) ;



CREATE  INDEX I_FK_MATERIAL_TEACHER
     ON MATERIAL (REGISTER_NUMBER ASC);

CREATE  INDEX I_FK_MATERIAL_GRADE
     ON MATERIAL (GRADE_ID ASC);


CREATE TABLE IF NOT EXISTS OFFICE
 (
   OFFICE_ID BIGINT NOT NULL  ,
   OFFICE_NAME CHAR(32) NULL,
   PRIMARY KEY (OFFICE_ID) 
 ) ;


CREATE TABLE IF NOT EXISTS GRADE
 (
   GRADE_ID BIGINT NOT NULL  ,
   GRADE_NAME CHAR(32) NOT NULL  ,
   INVENTORY BIGINT NOT NULL,
   PRIMARY KEY (GRADE_ID) 
 ) ;


CREATE TABLE IF NOT EXISTS CYCLE
 (
   CYCLE_ID BIGINT NOT NULL  ,
   SECTION_ID BIGINT NOT NULL  ,
   SECTION_NAME CHAR(32) NOT NULL  ,
   GRADE_ID BIGINT NOT NULL,
   PRIMARY KEY (CYCLE_ID) 
 ) ;



CREATE  INDEX I_FK_CYCLE_SECTION
     ON CYCLE (SECTION_ID ASC,SECTION_NAME ASC);

CREATE  INDEX I_FK_CYCLE_GRADE
     ON CYCLE (GRADE_ID ASC);


CREATE TABLE IF NOT EXISTS ASSOCIATE
 (
   GRADE_ID BIGINT NOT NULL  ,
   CODE BIGINT NOT NULL,
   PRIMARY KEY (GRADE_ID,CODE) 
 ) ;



CREATE  INDEX I_FK_ASSOCIATE_GRADE
     ON ASSOCIATE (GRADE_ID ASC);

CREATE  INDEX I_FK_ASSOCIATE_SERIES
     ON ASSOCIATE (CODE ASC);


CREATE TABLE IF NOT EXISTS ASSIGN
 (
   GRADE_ID BIGINT NOT NULL  ,
   REGISTER_NUMBER BIGINT NOT NULL  ,
   COPY_NUMBER CHAR(32) NULL  ,
   TEACHER_MAIN BOOL NULL,
   PRIMARY KEY (GRADE_ID,REGISTER_NUMBER) 
 ) ;



CREATE  INDEX I_FK_ASSIGN_GRADE
     ON ASSIGN (GRADE_ID ASC);

CREATE  INDEX I_FK_ASSIGN_TEACHER
     ON ASSIGN (REGISTER_NUMBER ASC);




ALTER TABLE TEACHER 
  ADD constraint FK_TEACHER_OFFICE  FOREIGN KEY  (OFFICE_ID)
      REFERENCES OFFICE (OFFICE_ID) ;


ALTER TABLE TEACHER 
  ADD constraint  FK_TEACHER_FONCTION FOREIGN KEY  (FONCTION_NAME)
      REFERENCES FONCTION (FONCTION_NAME) ;


ALTER TABLE MATERIAL 
  ADD constraint FK_MATERIAL_TEACHER  FOREIGN KEY  (REGISTER_NUMBER)
      REFERENCES TEACHER (REGISTER_NUMBER) ;


ALTER TABLE MATERIAL 
  ADD constraint  FK_MATERIAL_GRADE FOREIGN KEY  (GRADE_ID)
      REFERENCES GRADE (GRADE_ID) ;


ALTER TABLE CYCLE 
  ADD constraint FK_CYCLE_SECTION  FOREIGN KEY  (SECTION_ID,SECTION_NAME)
      REFERENCES SECTION (SECTION_ID,SECTION_NAME) ;


ALTER TABLE CYCLE 
  ADD constraint FK_CYCLE_GRADE  FOREIGN KEY  (GRADE_ID)
      REFERENCES GRADE (GRADE_ID) ;


ALTER TABLE ASSOCIATE 
  ADD constraint FK_ASSOCIATE_GRADE  FOREIGN KEY  (GRADE_ID)
      REFERENCES GRADE (GRADE_ID) ;


ALTER TABLE ASSOCIATE 
  ADD constraint FK_ASSOCIATE_SERIES  FOREIGN KEY  (CODE)
      REFERENCES SERIES (CODE) ;


ALTER TABLE ASSIGN 
  ADD constraint FK_ASSIGN_GRADE  FOREIGN KEY  (GRADE_ID)
      REFERENCES GRADE (GRADE_ID) ;


ALTER TABLE ASSIGN 
  ADD constraint  FK_ASSIGN_TEACHER FOREIGN KEY  (REGISTER_NUMBER)
      REFERENCES TEACHER (REGISTER_NUMBER) ;

